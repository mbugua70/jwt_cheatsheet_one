// MONGOOSE HOOKS
// This are special mongoose function that fires when certain mongoose event happen.

i.e -- after a new user has been saved to the db.

Mongoose uses the traditional function context for hooks to refer to the document being processed.

When you use an arrow function, it does not have its own this context, and it inherits the this value from its enclosing scope. In the case of Mongoose hooks, using an arrow function will result in the arrow function inheriting the this value from the context where the hook was defined, which may not be the document being processed.


// PASSWORD HASHING

PASSWORD -> HASHING ALGORITHM -> HASHED PASSWORD

// We will use something called salt to make our password even more secure to avoid hackers from reengineering simple hash password.


i.e HSJFLDtest123 - has a salt strings of HSJFLD


// COOKIES
// stores data in user's browsers

i.e

request -----------> server
                      create COOKIES
                        * decide what information cookie will hold
                        * how long a cookie the cookie should last




// JSON WEB TOKEN

              email & pass
LOGIN FORM --------------> server
                          **  CREDINTIAL CHECK **
                           - the server will check if the credintial are correct.
                           - if there are correct the server will create jwt for the user
                           - send it to the browser to be stored in the cookie
                           - NOTE:: cookies are send to server by the browser when every request are made e.g requesting a new page
                           - wen the server gets the token it can verify it to identify the user.


JWT SIGNING

-- HEADER --
- it tells the server what type of signature is being in used.

-- PAYLOAD --
- contains user id

-- SIGNATURE --
- makes the token secure.



::NOTES
   - when user has successfuly logged in
   - the header part and payload part will be hashed together
   - it will use SECRET (secure secret string)
   - our jwt will be added to the browser cookie (i.e jwt syntax - header.payload.signature)